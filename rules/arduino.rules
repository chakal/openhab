import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*
import java.util.*
import org.eclipse.xtext.xbase.lib.*
import org.openhab.core.items.*


var String ArduinoUpdate = ""
var String sketchName = ""

var int V_TEMP = 0
var int V_HUM = 1
var int V_LIGHT = 2
var int V_DIMMER = 3
var int V_PRESSURE = 4
var int V_FORECAST = 5
var int V_RAIN = 6
var int V_RAINRATE = 7
var int V_WIND = 8
var int V_GUST = 9
var int V_DIRECTION = 10
var int V_UV = 11
var int V_WEIGHT = 12
var int V_DISTANCE = 13
var int V_IMPEDANCE = 14
var int V_ARMED = 15
var int V_TRIPPED = 16
var int V_WATT = 17
var int V_KWH = 18
var int V_SCENE_ON = 19
var int V_SCENE_OFF = 20
var int V_HEATER = 21
var int V_HEATER_SW = 22
var int V_LIGHT_LEVEL = 23
var int V_VAR1 = 24
var int V_VAR2 = 25
var int V_VAR3 = 26
var int V_VAR4 = 27
var int V_VAR5 = 28
var int V_UP = 29
var int V_DOWN = 30
var int V_STOP = 31
var int V_IR_SEND = 32
var int V_IR_RECEIVE = 33
var int V_FLOW = 34
var int V_VOLUME = 35
var int V_LOCK_STATUS = 36
var int V_DUST_LEVEL = 37
var int V_VOLTAGE = 38
var int V_CURRENT = 39
var int msgPresentation = 0
var int msgSet = 1
var int msgReq = 2
var int msgInternal = 3
var int msgStream = 4
var int alarmArmor = 1

// Internal Commands

var int I_BATTERY_LEVEL = 0
var int I_TIME = 1
var int I_VERSION = 2
var int I_ID_REQUEST = 3
var int I_ID_RESPONSE = 4
var int I_INCLUSION_MODE = 5
var int I_CONFIG = 6
var int I_FIND_PARENT = 7
var int I_FIND_PARENT_RESPONSE = 8
var int I_LOG_MESSAGE = 9
var int I_CHILDREN = 10
var int I_SKETCH_NAME = 11
var int I_SKETCH_VERSION = 12
var int I_REBOOT = 13
var int I_GATEWAY_READY = 14

// Mappings
var HashMap<String, String> sensorToItemsMap = newLinkedHashMap(
    "100;0;"            	-> "Humidity_G_Garage",
    "Humidity_G_Garage" 	-> "100;0;",
    "100;1;"            	-> "Temperature_G_Garage",
    "Temperature_G_Garage"      -> "100;1;",
    "100;2;"			-> "Contact_G_Garage",
    "Contact_G_Garage"		-> "100;2;",
    "Relay_G_Garage"		-> "100;3;",
    "100;3;"			-> "Relay_G_Garage",

    "101;0;"            	-> "Humidity_101",
    "Humidity_101"       	-> "101;0;",
    "101;1;"            	-> "Temperature_101",
    "Temperature_101"       	-> "101;1;"
)

//switch function
val org.eclipse.xtext.xbase.lib.Functions$Function4 switchOperation = [
    org.openhab.core.library.items.SwitchItem relayItem, 
    org.openhab.core.library.items.StringItem arduinoItem, 
    String arduinoDevMap,
    Integer subType|
    var Integer state = 0
        if (relayItem.state == OFF) {
        state = 0 
    }
    else {
        state = 1
    }
    logInfo("arduino.rules", "Function: switchOperation >> "+arduinoDevMap + "1;1;" + subType + ";" + state )
    arduinoItem.sendCommand(arduinoDevMap + "1;0;" + subType + ";" + state + "\n")
]



//receiving msg from mysensors gateway
rule "Arduino sends to Openhab"
    when
        Item Arduino received update
    then
        var String lineBuffer =  Arduino.state.toString.split("\n")
        for (String line : lineBuffer) {
            var String[] message = line.split(";")
            var Integer nodeId = new Integer(message.get(0))
            var Integer childId = new Integer(message.get(1))
            var Integer msgType = new Integer(message.get(2))
            var Integer ack = new Integer(message.get(3))
            var Integer subType = new Integer(message.get(4))
            var String msg = message.get(5)
            if(msgType == 1 ){
                if (subType == V_TEMP){
                    postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), msg)
                    logInfo("arduino.rules", "Temp item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " temp: " + msg )
                    }
                if (subType == V_HUM){
                    postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), msg)
                    logInfo("arduino.rules", "Hum item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " hum: " + msg )
                    }
	        if (subType == V_LIGHT){
                    var String state
                    var Integer statusInt = new Integer(message.get(5))
                    if(statusInt == 1) { 
                        state = "ON"
                        } 
                    else { 
                        state = "OFF" 
                        }
                    postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), state)
                    logInfo("arduino.rules", "Light Item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " Light: " + state )
                    }
		if (subType == V_TRIPPED){
                    var String state
                    var Integer statusInt = new Integer(message.get(5))
		    if(statusInt == 1) {
                        state = "OPEN"
                        }
	            else {
			state = "CLOSED"
			}
                    postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), state)
                    logInfo("arduino.rules", "Button/Contact item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " Status: " + state )
                    }
		if (subType == V_LOCK_STATUS){
                    var String lockstatus="OPEN"
                    if (msg=="1"){
                        lockstatus="CLOSED"
                    }
                    postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), lockstatus)
                    logInfo("arduino.rules", "Door/Window item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " Status: " + lockstatus )
                    }
		if (subType == V_VOLTAGE){
                    postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), msg)
                    logInfo("arduino.rules", "Voltage item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " voltage: " + msg )
                    }
		if (subType == V_LIGHT_LEVEL){
                    postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), msg)
                    logInfo("arduino.rules", "Light item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " light: " + msg )
                    }


            // Internal Command
            if(msgType == 3){
                if(subType == I_SKETCH_NAME){
                        logInfo("arduino.rules", "Sketch name: " + msg )
                        sketchName=msg
                    }
                if(subType == I_SKETCH_VERSION){
                        logInfo("arduino.rules", "Sketch version: " + msg )
                        postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), sketchName+" " +msg )
                        sketchName=""
                    }
        
                }
            }   
        }
end

rule "Relay_G_Garage Switch Rule"
    when
        Item Relay_G_Garage received command
    then
        switchOperation.apply(Relay_G_Garage, Arduino, sensorToItemsMap.get("Relay_G_Garage"), V_LIGHT)
	logInfo("arduino.rules", "Opening Garage...")
	//sendCommand(Arduino, "100;3;1;0;2;1\n")
end 

